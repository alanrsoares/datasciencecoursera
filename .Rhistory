install.packages("swirl")
library("swirl")
swirl()
help()
find.package("devtools")
install.package("KernSmooth")
install.packages("KernSmooth")
info()
library("KernSmooth")
getwd()
cls
swirl()
5 + 7
install.packages("devtools")
5 + 7
info()
bye()
help(console)
??console
setwd("~/GitHub")
setwd("~/GitHub")
setwd("~/GitHub/datasciencecoursera")
Map
Reduce
Filter
Head
head
tail
x <- 0:10
x
head(tail(x))
tail(x)
head(x)
head(x)[1]
head(tail(x)[1]
head(tail(x))[1]
head(tail(x))[1]
Reduce(`+`, x)
x <- 1:5
Reduce(`+`, x)
reduce
Reduce
example(Reduce)
fn <- function(x, y){ return x+y*2 }
2+2*3
fn <- function(x, y){ return x + y * 2; }
foo <- function(x, y){ return x + y * 2; }
foo <- function(x, y){ return(x + y * 2) }
Reduce(foo, x)
x <- 1:1
Reduce(foo, x)
x <- 1:2
Reduce(foo, x)
quickSort <- function(xs){
if(length(xs) <= 1){}
}
quickSort <- function(xs){
if(length(xs) <= 1){ return(xs) }
element = xs[1]
partition = xs[-1]
v1 <- partition[partition < element]
v1 <- partition[partition >= element]
v1 <- quickSort(v1)
v2 <- quickSort(v2)
return(c(v1, element, v2))
}
quickSort(c(4, 65, 2, -31, 0, 99, 83, 782, 1))
quickSort <- function(xs){
if(length(xs) <= 1){ return(xs) }
element = xs[1]
partition = xs[-1]
v1 <- partition[partition < element]
v2 <- partition[partition >= element]
v1 <- quickSort(v1)
v2 <- quickSort(v2)
return(c(v1, element, v2))
}
quickSort(c(4, 65, 2, -31, 0, 99, 83, 782, 1))
F002
FOO2
foo
FOO
